{"title":"Java汉字排序","uid":"1b89db67c283f4b338cd45dddb12dd9b","slug":"sort-chinese-chars","date":"2021-11-05T06:52:02.000Z","updated":"2021-12-20T02:42:19.478Z","comments":true,"path":"api/articles/sort-chinese-chars.json","keywords":null,"cover":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>设计一个通讯录列表，在查询的时候将联系人按照姓名拼音排序。</p>\n<h1 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h1><p>使用Comparator和Collator类，对队列内的字符串排序</p>\n<h2 id=\"对字符串List排序的场景\"><a href=\"#对字符串List排序的场景\" class=\"headerlink\" title=\"对字符串List排序的场景\"></a>对字符串List排序的场景</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.text.Collator;\nimport java.util.*;\n\npublic class PersonList &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建序列\n        List&lt;String&gt; personList &#x3D; Arrays.asList(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;);\n\n        &#x2F;&#x2F; 初始化比较器\n        Comparator&lt;Object&gt; comparator &#x3D; Collator.getInstance(Locale.CHINA);\n\n        &#x2F;&#x2F; 排序并输出结果\n        personList.sort(comparator);\n        for (String name :\n                personList) &#123;\n            System.out.println(name);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>程序输出:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">李四\n王五\n张三</code></pre>\n\n<p>如果队列中的元素为对象（如自定义实体类）要怎么排序呢</p>\n<h2 id=\"对List元素为对象排序的场景\"><a href=\"#对List元素为对象排序的场景\" class=\"headerlink\" title=\"对List元素为对象排序的场景\"></a>对List元素为对象排序的场景</h2><p>首先写一个实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Person &#123;\n    private String name;\n\n    private String number;\n&#125;</code></pre>\n<p>自定义Comparator的排序方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.text.Collator;\nimport java.util.*;\n\npublic class PersonList &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建联系人\n        Person person1 &#x3D; new Person(&quot;张三&quot;, &quot;13011112222&quot;);\n        Person person2 &#x3D; new Person(&quot;李四&quot;, &quot;13111112222&quot;);\n        Person person3 &#x3D; new Person(&quot;王五&quot;, &quot;13311112222&quot;);\n\n        List&lt;Person&gt; contacts &#x3D; new ArrayList&lt;&gt;();\n        contacts.add(person1);\n        contacts.add(person2);\n        contacts.add(person3);\n\n        Comparator&lt;Person&gt; comparator &#x3D; (o1, o2) -&gt; &#123;\n            Collator collator &#x3D; Collator.getInstance(Locale.CHINA);\n            return collator.getCollationKey(o1.getName()).compareTo(\n                    collator.getCollationKey(o2.getName()));\n        &#125;;\n\n        contacts.sort(comparator);\n\n        for (Person person :\n                contacts) &#123;\n            System.out.println(person);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>输出结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Person(name&#x3D;李四, number&#x3D;13111112222)\nPerson(name&#x3D;王五, number&#x3D;13311112222)\nPerson(name&#x3D;张三, number&#x3D;13011112222)</code></pre>\n","text":"前言设计一个通讯录列表，在查询的时候将联系人按照姓名拼音排序。 如何实现使用Comparator和Collator类，对队列内的字符串排序 对字符串List排序的场景import java.text.Collator; import java.util.*; public cla...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">如何实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2List%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">对字符串List排序的场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9List%E5%85%83%E7%B4%A0%E4%B8%BA%E5%AF%B9%E8%B1%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">对List元素为对象排序的场景</span></a></li></ol></li></ol>","author":{"name":"風籟","slug":"blog-author","avatar":"/img/profile.png","link":"/","description":"Java/Python <br/> Dota 2/MHW/FFXIV","socials":{"github":"https://github.com/yinhao-f","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/109981771?spm_id_from=333.1007.0.0"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/profiles/76561198119413566"}}}},"mapped":true,"prev_post":{"title":"从零搭建MySQL数据库","uid":"adb368b14a25670c65fce9c14d140e79","slug":"create-sql-db","date":"2021-11-08T06:23:59.000Z","updated":"2021-12-20T02:42:19.478Z","comments":true,"path":"api/articles/create-sql-db.json","keywords":null,"cover":null,"text":"前言安装MySQL，建立连接，并在IntelliJ IDEA中操作使用 安装MySQL从MySQL官网下载MySQL Installer for Windows 提示 如果没有安装Visual Basics和Python，安装过程中选择Developer Default会报错，提...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":3,"path":"api/tags/MySQL.json"},{"name":"IntelliJ IDEA","slug":"IntelliJ-IDEA","count":1,"path":"api/tags/IntelliJ-IDEA.json"}],"author":{"name":"風籟","slug":"blog-author","avatar":"/img/profile.png","link":"/","description":"Java/Python <br/> Dota 2/MHW/FFXIV","socials":{"github":"https://github.com/yinhao-f","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/109981771?spm_id_from=333.1007.0.0"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/profiles/76561198119413566"}}}}},"next_post":{}}