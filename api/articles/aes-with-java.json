{"title":"在Java里使用AES加密","uid":"550f32996616214cff6d7d1a117473b3","slug":"aes-with-java","date":"2021-11-05T02:43:32.000Z","updated":"2021-12-20T02:42:19.478Z","comments":true,"path":"api/articles/aes-with-java.json","keywords":null,"cover":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>写一个模拟登录界面的时候需要把前端传来的用户密码做解密，于是写一个AES加密解密工具</p>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><p>Java有内置的AES工具，只需调用即可</p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p>导入所需的包，也可以让IDE自动完成</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;</code></pre>\n\n<h2 id=\"定义常量\"><a href=\"#定义常量\" class=\"headerlink\" title=\"定义常量\"></a>定义常量</h2><p>定义一个默认密钥<code>SECRET_KEY</code>，方便调试使用<br>定义默认算法<code>ALG</code>，使用AES、ECB电子密码本模式，PKCS5Padding<br>导入base64转码器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static final String SECRET_KEY &#x3D; &quot;ECB&#x2F;PKCS5Padding&quot;;\n\npublic static final String AES &#x3D; &quot;AES&quot;;\n\nprivate static final String ALG &#x3D; &quot;AES&#x2F;ECB&#x2F;PKCS5Padding&quot;;\n\nprivate static Base64.Encoder base64Encoder &#x3D; Base64.getEncoder();\n\nprivate static Base64.Decoder base64Decoder &#x3D; Base64.getDecoder();</code></pre>\n\n<h2 id=\"加密模块\"><a href=\"#加密模块\" class=\"headerlink\" title=\"加密模块\"></a>加密模块</h2><p>虽然本次暂时用不到加密模块，但既然写了解密，加密也差不多</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static String encode(String content, String key) &#123;\n    try &#123;\n        SecretKey secretKey &#x3D; new SecretKeySpec(key.getBytes(), AES);\n        Cipher cipher &#x3D; Cipher.getInstance(ALG);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        byte[] byteEncode &#x3D; content.getBytes(StandardCharsets.UTF_8);\n        byte[] byteAES &#x3D; cipher.doFinal(byteEncode);\n        return base64Encoder.encodeToString(byteAES);\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n\n    return null;\n&#125;</code></pre>\n<p>加密后使用base64转码，记得转为UTF_8，否则中文会出错</p>\n<h2 id=\"解密模块\"><a href=\"#解密模块\" class=\"headerlink\" title=\"解密模块\"></a>解密模块</h2><p>和加密模块大同小异，只需要将cipher的模式改成DECRYPT_MODE，并将密码先做base64转换为字节数组<br>解码后同样需要使用UTF_8编码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static String decode(String content, String key) &#123;\n    try &#123;\n        SecretKey secretKey &#x3D; new SecretKeySpec(key.getBytes(), AES);\n        Cipher cipher &#x3D; Cipher.getInstance(ALG);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        byte[] byteContent &#x3D; base64Decoder.decode(content);\n        byte[] byteDecode &#x3D; cipher.doFinal(byteContent);\n        return new String(byteDecode, StandardCharsets.UTF_8);\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n\n    return null;\n&#125;</code></pre>\n\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    String content &#x3D; &quot;就是不告诉你&quot;;\n    String encrypted &#x3D; encode(content, SECRET_KEY);\n    String decrypted &#x3D; decode(encrypted, SECRET_KEY);\n\n    System.out.println(&quot;原文: &quot; + content);\n    System.out.println(&quot;密文: &quot; + encrypted);\n    System.out.println(&quot;解密: &quot; + decrypted);\n    &#125;</code></pre>\n\n<p>结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">原文: 就是不告诉你\n密文: 0LKe217dJZkpaBaLhXCdKtydSp8Zig31ptI&#x2F;UkAkxDo&#x3D;\n解密: 就是不告诉你</code></pre>\n","text":"前言写一个模拟登录界面的时候需要把前端传来的用户密码做解密，于是写一个AES加密解密工具 具体实现Java有内置的AES工具，只需调用即可 导入导入所需的包，也可以让IDE自动完成 import javax.crypto.Cipher; import javax.crypto.S...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">具体实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">导入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">定义常量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">加密模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%AF%86%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">解密模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">调试</span></a></li></ol></li></ol>","author":{"name":"風籟","slug":"blog-author","avatar":"/img/profile.png","link":"/","description":"Java/Python <br/> Dota 2/MHW/FFXIV","socials":{"github":"https://github.com/yinhao-f","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/109981771?spm_id_from=333.1007.0.0"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/profiles/76561198119413566"}}}},"mapped":true,"prev_post":{"title":"Java汉字排序","uid":"1b89db67c283f4b338cd45dddb12dd9b","slug":"sort-chinese-chars","date":"2021-11-05T06:52:02.000Z","updated":"2021-12-20T02:42:19.478Z","comments":true,"path":"api/articles/sort-chinese-chars.json","keywords":null,"cover":null,"text":"前言设计一个通讯录列表，在查询的时候将联系人按照姓名拼音排序。 如何实现使用Comparator和Collator类，对队列内的字符串排序 对字符串List排序的场景import java.text.Collator; import java.util.*; public cla...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"author":{"name":"風籟","slug":"blog-author","avatar":"/img/profile.png","link":"/","description":"Java/Python <br/> Dota 2/MHW/FFXIV","socials":{"github":"https://github.com/yinhao-f","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/109981771?spm_id_from=333.1007.0.0"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/profiles/76561198119413566"}}}}},"next_post":{}}