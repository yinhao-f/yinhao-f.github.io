[{"id":"3ac38909d2fd409725ed531ea0233490","title":"MySQL Cheatsheet","content":"前言实用MySQL语句小抄，持久更新SQL，全称Structured Query Language，读作sequel或S-Q-L\n命令行语句连接服务器&gt;mysql -u root -p  #root是连接所使用的用户名\n\n断开连接mysql&gt; quit\nBye\n\n查看当前版本mysql&gt; select version();\n+-----------+\n| version() |\n+-----------+\n| 8.0.27    |\n+-----------+\n1 row in set (0.00 sec)\n\n查看所有数据库mysql&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sakila             |\n| sys                |\n| world              |\n+--------------------+\n7 rows in set (0.00 sec)\n\n数据库指令创建数据库create database 数据库名\n\n使用数据库use 数据库名\n\n查看当前选择的数据库select database()\n\n删除数据库drop database 数据库名\n\n表指令查看数据库内所有表show tables\n\n创建表create table table_name\n  (column_1 变量类型,\n  column_2 变量类型,\n  column_3 变量类型...)\n\n查看表结构describe table_name\n\n记录指令增insert into table_name\n  (column_1, column_2,...)\n  values (value_1, value_2,...)\n\n删delete from table_name [where 条件语句]\n\n改update table_name\n  set column_1 &#x3D; value_1,\n  column_2 &#x3D; value_2\n  [where 条件语句 [and&#x2F;or 条件语句2]]\n\n查select column_1[, column_2, column_3] [as column_alias]\n  from table_name\n  [where 条件]\n\n数据类型数值类\n\n\n类型\n范围\n\n\n\ntinyint\n(0, 255)\n\n\nsmallint\n(0, 65535)\n\n\nmediumint\n(0, 16777215)\n\n\nint\n(0, 4294967295)\n\n\nbigint\n(0, 2^64-1)\n\n\ndecimal\n(M, D) M&lt;=65\n\n\nfloat\n(-3.402823466E+38, -1.175494351E-38), 0, (1.175494351E-38, 3.402823466E+38)\n\n\ndouble\n(-1.7976931348623157E+308, -2.2250738585072014E-308), 0, (2.2250738585072014E-308, 1.7976931348623157E+308)\n\n\n日期类\n\n\n类型\n格式\n\n\n\ndate\n‘0000-00-00’\n\n\ntime\n‘00:00:00’\n\n\ndatetime\n‘0000-00-00 00:00:00’\n\n\ntimestamp\n‘0000-00-00 00:00:00’\n\n\nyear\n0000\n\n\n字符串类\n\n\n类型\n格式\n\n\n\nchar\n(0, 255)\n\n\nvarchar\n(0, 65535)\n\n\n参考资料\nMySQL官方文档\nMySQL教程|菜鸟教程\nSQL教程|菜鸟教程\n\n","slug":"mysql-cheatsheet","date":"2021-11-10T07:01:38.000Z","categories_index":"","tags_index":"MySQL","author_index":"風籟"},{"id":"adb368b14a25670c65fce9c14d140e79","title":"从零搭建MySQL数据库","content":"前言安装MySQL，建立连接，并在IntelliJ IDEA中操作使用\n安装MySQL从MySQL官网下载MySQL Installer for Windows\n\n\n\n\n\n\n提示\n如果没有安装Visual Basics和Python，安装过程中选择Developer Default会报错，提示未找到这两种语言环境，可以选择Custom然后勾掉不需要的Connector驱动\n\n安装过程中会提示设置密码，之后访问数据库会用到\n另外可以选择以Windows服务启动MySQL服务器，这样开机以后服务器就会自动启动并在后台运行\n将MySQL添加到PATH设置系统环境变量，以在cmd中直接使用mysql命令打开我的电脑，右键空白处，属性，高级系统设置，环境变量，在系统环境变量中双击Path，选择新建，输入C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin，然后点击确定即可\n使用CMD连接到MySQL本地服务器打开CMD，输入\n&gt;mysql -u root -p\n系统会弹出 Enter password:，输入你之前安装时设置的密码连接成功后会显示\n&gt;mysql -u root -p\nEnter password: ***\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n...\n使用MySQL创建数据库创建menagerie数据库，并与之连接\nmysql&gt; create database menagerie;\nQuery OK, 1 row affected (0.04 sec)\n\nmysql&gt; use menagerie\nDatabase changed\n\n创建表mysql&gt; create table pet (name varchar(20), owner varchar(20),\n    -&gt; species varchar(20), sex char(1), birth date, death date);\nQuery OK, 0 rows affected (0.11 sec)\n\nmysql&gt; show tables;\n+---------------------+\n| Tables_in_menagerie |\n+---------------------+\n| pet                 |\n+---------------------+\n1 row in set (0.00 sec)\n\n添加记录mysql&gt; insert into pet\n    -&gt; values (&#39;Puffball&#39;,&#39;Diane&#39;,&#39;hamster&#39;,&#39;f&#39;,&#39;1999-03-30&#39;,NULL);\nQuery OK, 1 row affected (0.06 sec)\n\nmysql&gt; select * from pet;\n+----------+-------+---------+------+------------+-------+\n| name     | owner | species | sex  | birth      | death |\n+----------+-------+---------+------+------------+-------+\n| Puffball | Diane | hamster | f    | 1999-03-30 | NULL  |\n+----------+-------+---------+------+------------+-------+\n1 row in set (0.02 sec)\n\n在IntelliJ IDEA中与服务器建立连接IDEA Ultimate版内嵌了非常好用的数据库管理工具，虽然要付费，但是可以通过插件实现免费试用无限续杯\n将数据库添加到IDEA中在IDEA的右边侧栏有一个Database标签，展开后点左上角的加号，Data Source选择MySQL\n\n\n\n\n在次级菜单中，输入用户名和密码，以及数据库名称\n\n\n\n\n选择驱动IDEA有自带的JDBC驱动，也可以选用安装MySQL时附带的驱动，MySQL附带的驱动版本可能会领先一些\n如果要自选驱动，点击Driver: MySQL，选择Go to Driver\n\n\n\n\n点击Driver Files下面的+号，选择Custom JARs，选取到MySQL安装目录下的驱动包\n\n\n\n\n路径默认在 C:\\Program Files (x86)\\MySQL\\Connector J 8.0\\mysql-connector-java-8.0.27.jar （版本可能有所区别）\n设置好后，点击左上方的左箭头返回数据库配置页面，或者按Ctrl+Alt+左箭头\n测试连接点击Test Connection，正常的话会出现以下提示\n\n\n\n\n点击ok，右边的Database侧栏会出现导入的数据库，双击pet表，应该就能看到之前添加的数据了\n\n\n\n\n完成！\n参考资料MySQL 8.0官方文档\n","slug":"create-sql-db","date":"2021-11-08T06:23:59.000Z","categories_index":"","tags_index":"Java,MySQL,IntelliJ IDEA","author_index":"風籟"},{"id":"1b89db67c283f4b338cd45dddb12dd9b","title":"Java汉字排序","content":"前言设计一个通讯录列表，在查询的时候将联系人按照姓名拼音排序。\n如何实现使用Comparator和Collator类，对队列内的字符串排序\n对字符串List排序的场景import java.text.Collator;\nimport java.util.*;\n\npublic class PersonList &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建序列\n        List&lt;String&gt; personList &#x3D; Arrays.asList(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;);\n\n        &#x2F;&#x2F; 初始化比较器\n        Comparator&lt;Object&gt; comparator &#x3D; Collator.getInstance(Locale.CHINA);\n\n        &#x2F;&#x2F; 排序并输出结果\n        personList.sort(comparator);\n        for (String name :\n                personList) &#123;\n            System.out.println(name);\n        &#125;\n    &#125;\n&#125;\n\n程序输出:\n李四\n王五\n张三\n\n如果队列中的元素为对象（如自定义实体类）要怎么排序呢\n对List元素为对象排序的场景首先写一个实体类\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Person &#123;\n    private String name;\n\n    private String number;\n&#125;\n自定义Comparator的排序方法\nimport java.text.Collator;\nimport java.util.*;\n\npublic class PersonList &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建联系人\n        Person person1 &#x3D; new Person(&quot;张三&quot;, &quot;13011112222&quot;);\n        Person person2 &#x3D; new Person(&quot;李四&quot;, &quot;13111112222&quot;);\n        Person person3 &#x3D; new Person(&quot;王五&quot;, &quot;13311112222&quot;);\n\n        List&lt;Person&gt; contacts &#x3D; new ArrayList&lt;&gt;();\n        contacts.add(person1);\n        contacts.add(person2);\n        contacts.add(person3);\n\n        Comparator&lt;Person&gt; comparator &#x3D; (o1, o2) -&gt; &#123;\n            Collator collator &#x3D; Collator.getInstance(Locale.CHINA);\n            return collator.getCollationKey(o1.getName()).compareTo(\n                    collator.getCollationKey(o2.getName()));\n        &#125;;\n\n        contacts.sort(comparator);\n\n        for (Person person :\n                contacts) &#123;\n            System.out.println(person);\n        &#125;\n    &#125;\n&#125;\n\n输出结果：\nPerson(name&#x3D;李四, number&#x3D;13111112222)\nPerson(name&#x3D;王五, number&#x3D;13311112222)\nPerson(name&#x3D;张三, number&#x3D;13011112222)\n","slug":"sort-chinese-chars","date":"2021-11-05T06:52:02.000Z","categories_index":"","tags_index":"Java,工具","author_index":"風籟"},{"id":"550f32996616214cff6d7d1a117473b3","title":"在Java里使用AES加密","content":"前言写一个模拟登录界面的时候需要把前端传来的用户密码做解密，于是写一个AES加密解密工具\n具体实现Java有内置的AES工具，只需调用即可\n导入导入所需的包，也可以让IDE自动完成\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\n定义常量定义一个默认密钥SECRET_KEY，方便调试使用定义默认算法ALG，使用AES、ECB电子密码本模式，PKCS5Padding导入base64转码器\npublic static final String SECRET_KEY &#x3D; &quot;ECB&#x2F;PKCS5Padding&quot;;\n\npublic static final String AES &#x3D; &quot;AES&quot;;\n\nprivate static final String ALG &#x3D; &quot;AES&#x2F;ECB&#x2F;PKCS5Padding&quot;;\n\nprivate static Base64.Encoder base64Encoder &#x3D; Base64.getEncoder();\n\nprivate static Base64.Decoder base64Decoder &#x3D; Base64.getDecoder();\n\n加密模块虽然本次暂时用不到加密模块，但既然写了解密，加密也差不多\npublic static String encode(String content, String key) &#123;\n    try &#123;\n        SecretKey secretKey &#x3D; new SecretKeySpec(key.getBytes(), AES);\n        Cipher cipher &#x3D; Cipher.getInstance(ALG);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        byte[] byteEncode &#x3D; content.getBytes(StandardCharsets.UTF_8);\n        byte[] byteAES &#x3D; cipher.doFinal(byteEncode);\n        return base64Encoder.encodeToString(byteAES);\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n\n    return null;\n&#125;\n加密后使用base64转码，记得转为UTF_8，否则中文会出错\n解密模块和加密模块大同小异，只需要将cipher的模式改成DECRYPT_MODE，并将密码先做base64转换为字节数组解码后同样需要使用UTF_8编码\npublic static String decode(String content, String key) &#123;\n    try &#123;\n        SecretKey secretKey &#x3D; new SecretKeySpec(key.getBytes(), AES);\n        Cipher cipher &#x3D; Cipher.getInstance(ALG);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        byte[] byteContent &#x3D; base64Decoder.decode(content);\n        byte[] byteDecode &#x3D; cipher.doFinal(byteContent);\n        return new String(byteDecode, StandardCharsets.UTF_8);\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n\n    return null;\n&#125;\n\n调试public static void main(String[] args) &#123;\n    String content &#x3D; &quot;就是不告诉你&quot;;\n    String encrypted &#x3D; encode(content, SECRET_KEY);\n    String decrypted &#x3D; decode(encrypted, SECRET_KEY);\n\n    System.out.println(&quot;原文: &quot; + content);\n    System.out.println(&quot;密文: &quot; + encrypted);\n    System.out.println(&quot;解密: &quot; + decrypted);\n    &#125;\n\n结果如下：\n原文: 就是不告诉你\n密文: 0LKe217dJZkpaBaLhXCdKtydSp8Zig31ptI&#x2F;UkAkxDo&#x3D;\n解密: 就是不告诉你\n","slug":"aes-with-java","date":"2021-11-05T02:43:32.000Z","categories_index":"","tags_index":"Java,工具","author_index":"風籟"}]