[{"id":"1b89db67c283f4b338cd45dddb12dd9b","title":"Java汉字排序","content":"汉字排序设计一个通讯录列表，在查询的时候将联系人按照姓名拼音排序。\n如何实现使用Comparator和Collator类，对队列内的字符串排序\n排序对象为字符串List的场景import java.text.Collator;\nimport java.util.*;\n\npublic class PersonList &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建序列\n        List&lt;String&gt; personList &#x3D; Arrays.asList(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;);\n\n        &#x2F;&#x2F; 初始化比较器\n        Comparator&lt;Object&gt; comparator &#x3D; Collator.getInstance(Locale.CHINA);\n\n        &#x2F;&#x2F; 排序并输出结果\n        personList.sort(comparator);\n        for (String name :\n                personList) &#123;\n            System.out.println(name);\n        &#125;\n    &#125;\n&#125;\n\n程序输出:\n李四\n王五\n张三\n\n如果队列中的元素为对象（如自定义实体类）要怎么排序呢\n元素为对象的排序方法首先写一个实体类\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Person &#123;\n    private String name;\n\n    private String number;\n&#125;\n自定义Comparator的排序方法\nimport java.text.Collator;\nimport java.util.*;\n\npublic class PersonList &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建联系人\n        Person person1 &#x3D; new Person(&quot;张三&quot;, &quot;13011112222&quot;);\n        Person person2 &#x3D; new Person(&quot;李四&quot;, &quot;13111112222&quot;);\n        Person person3 &#x3D; new Person(&quot;王五&quot;, &quot;13311112222&quot;);\n\n        List&lt;Person&gt; contacts &#x3D; new ArrayList&lt;&gt;();\n        contacts.add(person1);\n        contacts.add(person2);\n        contacts.add(person3);\n\n        Comparator&lt;Person&gt; comparator &#x3D; (o1, o2) -&gt; &#123;\n            Collator collator &#x3D; Collator.getInstance(Locale.CHINA);\n            return collator.getCollationKey(o1.getName()).compareTo(\n                    collator.getCollationKey(o2.getName()));\n        &#125;;\n\n        contacts.sort(comparator);\n\n        for (Person person :\n                contacts) &#123;\n            System.out.println(person);\n        &#125;\n    &#125;\n&#125;\n\n输出结果：\nPerson(name&#x3D;李四, number&#x3D;13111112222)\nPerson(name&#x3D;王五, number&#x3D;13311112222)\nPerson(name&#x3D;张三, number&#x3D;13011112222)\n","slug":"sort-chinese-chars","date":"2021-11-05T06:52:02.000Z","categories_index":"","tags_index":"Java,工具","author_index":"風籟"},{"id":"550f32996616214cff6d7d1a117473b3","title":"在Java里使用AES加密","content":"在Java里使用AES加密前言写一个模拟登录界面的时候需要把前端传来的用户密码做解密，于是写一个AES加密解密工具\n具体实现Java有内置的AES工具，只需调用即可\n导入导入所需的包，也可以让IDE自动完成\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\n定义常量定义一个默认密钥SECRET_KEY，方便调试使用定义默认算法ALG，使用AES、ECB电子密码本模式，PKCS5Padding导入base64转码器\npublic static final String SECRET_KEY &#x3D; &quot;ECB&#x2F;PKCS5Padding&quot;;\n\npublic static final String AES &#x3D; &quot;AES&quot;;\n\nprivate static final String ALG &#x3D; &quot;AES&#x2F;ECB&#x2F;PKCS5Padding&quot;;\n\nprivate static Base64.Encoder base64Encoder &#x3D; Base64.getEncoder();\n\nprivate static Base64.Decoder base64Decoder &#x3D; Base64.getDecoder();\n\n加密模块虽然本次暂时用不到加密模块，但既然写了解密，加密也差不多\npublic static String encode(String content, String key) &#123;\n    try &#123;\n        SecretKey secretKey &#x3D; new SecretKeySpec(key.getBytes(), AES);\n        Cipher cipher &#x3D; Cipher.getInstance(ALG);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        byte[] byteEncode &#x3D; content.getBytes(StandardCharsets.UTF_8);\n        byte[] byteAES &#x3D; cipher.doFinal(byteEncode);\n        return base64Encoder.encodeToString(byteAES);\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n\n    return null;\n&#125;\n加密后使用base64转码，记得转为UTF_8，否则中文会出错\n解密模块和加密模块大同小异，只需要将cipher的模式改成DECRYPT_MODE，并将密码先做base64转换为字节数组解码后同样需要使用UTF_8编码\npublic static String decode(String content, String key) &#123;\n    try &#123;\n        SecretKey secretKey &#x3D; new SecretKeySpec(key.getBytes(), AES);\n        Cipher cipher &#x3D; Cipher.getInstance(ALG);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        byte[] byteContent &#x3D; base64Decoder.decode(content);\n        byte[] byteDecode &#x3D; cipher.doFinal(byteContent);\n        return new String(byteDecode, StandardCharsets.UTF_8);\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n\n    return null;\n&#125;\n\n调试public static void main(String[] args) &#123;\n    String content &#x3D; &quot;就是不告诉你&quot;;\n    String encrypted &#x3D; encode(content, SECRET_KEY);\n    String decrypted &#x3D; decode(encrypted, SECRET_KEY);\n\n    System.out.println(&quot;原文: &quot; + content);\n    System.out.println(&quot;密文: &quot; + encrypted);\n    System.out.println(&quot;解密: &quot; + decrypted);\n    &#125;\n\n结果如下：\n原文: 就是不告诉你\n密文: 0LKe217dJZkpaBaLhXCdKtydSp8Zig31ptI&#x2F;UkAkxDo&#x3D;\n解密: 就是不告诉你\n","slug":"aes-with-java","date":"2021-11-05T02:43:32.000Z","categories_index":"","tags_index":"Java,工具","author_index":"風籟"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-10-28T02:29:09.797Z","categories_index":"","tags_index":"","author_index":"風籟"}]